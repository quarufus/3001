<script lang="ts">
	import { onMount } from 'svelte';
	import { init, tx, id } from '@instantdb/core';
	import { Trash2 } from 'lucide-svelte';
	import Switch from '$lib/components/Switch.svelte';

	const APP_ID = 'e5cbbced-52f2-4815-a726-b7122a1fe4ae';

	interface Item {
		id: string;
		text: string;
		done: boolean;
		color: string;
		createdAt: number;
	}

	const colors = {
		grey: 'bg-my-grey',
		red: 'bg-my-red',
		green: 'bg-my-green',
		blue: 'bg-my-blue',
		orange: 'bg-my-orange',
		pink: 'bg-my-pink',
		teal: 'bg-my-teal',
	};
	let selectedColor = "my-grey";

	type Schema = { items: Item };

	const db = init<Schema>({ appId: APP_ID });

	let error: { message: string };
	let items: Item[] = [];
	let input: string;
	let expanded = false;

	const onFocus = () => expanded = true;
	const onBlur = () => expanded = false;
	function selectColor(color: string) { selectedColor = color; }

	onMount(() => {
		db.subscribeQuery({ items: {} }, (resp) => {
			if (resp.error) {
				error = resp.error;
				return;
			}
			if (resp.data) {
				console.log(resp.data);
				items = resp.data.items;
			}
		});
	});

	function addItem(text: string, color: string) {
		db.transact(
			tx.items[id()].update({
				text,
				done: false,
				color,
				createdAt: Date.now()
			})
		);
		input = '';
		selectedColor = '';
	}
	function handleKey(e) {
		if (e.keyCode == 13) addItem(input, selectedColor);
	}
	function deleteItem(item: Item) {
		let result = confirm('Sure you want to delete?');
		if (result) db.transact(tx.items[item.id].delete());
	}
	function toggleDone(item: Item) {
		console.log(item.color);
		db.transact(tx.items[item.id].update({ done: !item.done }));
	}
	function deleteCompleted(items: Item[]) {
		const completed = items.filter((item) => item.done);
		const txs = completed.map((item) => tx.item[item.id].delete());
		db.transact(txs);
	}
	function toggleAllItems(items: Item[]) {
		const newVal = !items.every((item) => item.done);
		db.transact(items.map((item) => tx.item[item.id].update({ done: newVal })));
	}
</script>

<main class="flex flex-col items-center w-screen p-5">
	{#if error}
		<h1>Error: {error}</h1>
	{:else}
		<div class="add-container">
			<div class="bg-orange-300 py-5 px-8 rounded-md">
				<input bind:value={input} on:focus={onFocus} on:keydown={handleKey} />
				<button type="submit" on:click={() => addItem(input, selectedColor)}>Add</button>
				<div>
					{#each Object.entries(colors) as [title, color], i}
						<label class="{color} w-10 h-10 relative inline-block m-5 rounded-md">
							{#if i ==0}
							<input class="{color} opacity-0 h-0 w-0" on:input={() => selectColor(title)} type="radio" name="colors" value={color} checked/>
							{:else}
							<input class="{color} opacity-0 h-0 w-0" on:input={() => selectColor(title)} type="radio" name="colors" value={color}/>
							{/if}
							<span class="w-10 h-10 {color} cursor-pointer absolute rounded-md"></span>
						</label>
					{/each}
					<h2>{selectedColor}</h2>
				</div>
			</div>
		</div>
		{#each items as item}
			<div class="flex lg:w-2/3 md:w-4/5 w-full justify-between items-center px-8 py-5 {colors[item.color]} rounded-md my-5">
				<h3>{item.text}</h3>
				<div class="flex items-center gap-4">
					<!--<Switch item={item} toggle={toggleDone(item)}/>-->
					<button class="" on:click={() => deleteItem(item)}><Trash2/></button>
				</div>
			</div>
		{/each}
	{/if}
</main>

<style>
	.add-container {
		width: 100%;
		display: flex;
		justify-content: space-around;
	}
</style>
